definitions:
  helper.Response:
    properties:
      data: {}
      error:
        type: string
      message_en:
        type: string
      message_vi:
        type: string
      success:
        type: boolean
    type: object
  schemas.GetUserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - user
    type: object
  schemas.InitRegisterRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.InitRegisterResponse:
    properties:
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
    required:
    - is_activated
    - is_verified
    - phone_number
    type: object
  schemas.LoginRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.LoginResponse:
    properties:
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.LoginWithOAuthRequest:
    properties:
      email:
        maxLength: 256
        minLength: 3
        type: string
    required:
    - email
    type: object
  schemas.LoginWithOAuthResponse:
    properties:
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        maxLength: 11
        minLength: 9
        type: string
      user_id:
        type: string
    required:
    - full_name
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    required:
    - access_token
    - refresh_token
    - user_id
    type: object
  schemas.RegisterUserRequest:
    properties:
      email:
        maxLength: 256
        type: string
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      phone_number:
        type: string
    required:
    - full_name
    - phone_number
    type: object
  schemas.RegisterUserResponse:
    properties:
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - full_name
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.ResendOTPRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      role:
        type: string
      updated_at:
        type: string
    required:
    - id
    type: object
  schemas.VerifyCCCDResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - access_token
    - refresh_token
    - user
    type: object
  schemas.VerifyLoginOTPRequest:
    properties:
      otp:
        maxLength: 6
        minLength: 6
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - otp
    - phone_number
    - user_id
    type: object
  schemas.VerifyLoginOTPResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - access_token
    - refresh_token
    - user
    type: object
  schemas.VerifyRegisterOTPRequest:
    properties:
      otp:
        maxLength: 6
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - otp
    - phone_number
    type: object
info:
  contact: {}
paths:
  /auth/init-register:
    post:
      consumes:
      - application/json
      description: Start the registration process by sending an OTP to the provided
        phone number
      parameters:
      - description: Registration initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.InitRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.InitRegisterResponse'
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Initialize user registration
      tags:
      - auth
  /auth/login-oauth:
    post:
      consumes:
      - application/json
      description: Authenticates a user using OAuth2 and sends an OTP to their phone
        number
      parameters:
      - description: OAuth2 login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginWithOAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginWithOAuthResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login with OAuth2
      tags:
      - auth
  /auth/login-phone:
    post:
      consumes:
      - application/json
      description: Initiates login process by sending OTP to the provided phone number
      parameters:
      - description: Phone number for login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login with phone number
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by revoking their refresh token from the database
      parameters:
      - description: Bearer {refresh_token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Logout user and revoke the token
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Validates the refresh token and issues a new access token
      parameters:
      - description: Bearer <refresh_token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RefreshTokenResponse'
              type: object
        "400":
          description: Invalid refresh token or authorization header
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Refresh token and return new access token for the user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Starts the registration process and creates a user account
      parameters:
      - description: Registration request containing phone number, full name, and
          optional email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RegisterUserResponse'
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resends the OTP to the provided phone number for user verification
      parameters:
      - description: OTP resend request containing phone number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.ResendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Resend OTP
      tags:
      - auth
  /auth/verify-cccd:
    post:
      consumes:
      - multipart/form-data
      description: Verifies the front and back images of a user's CCCD, saves the
        information, and updates user status
      parameters:
      - description: Front image of CCCD
        in: formData
        name: front_image
        required: true
        type: file
      - description: Back image of CCCD
        in: formData
        name: back_image
        required: true
        type: file
      - description: User ID (UUID format)
        in: formData
        name: user_id
        required: true
        type: string
      - description: User's phone number (9-11 digits)
        in: formData
        maxLength: 11
        minLength: 9
        name: phone_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CCCD verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VerifyCCCDResponse'
              type: object
        "400":
          description: Invalid request or CCCD info
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify user's CCCD (Citizen Identity Card)
      tags:
      - auth
  /auth/verify-login-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP for login, creates a user session, and returns
        user info with access and refresh tokens
      parameters:
      - description: OTP verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyLoginOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VerifyLoginOTPResponse'
              type: object
        "400":
          description: Invalid request body or OTP verification failed
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create session
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify login OTP and create user session
      tags:
      - auth
  /auth/verify-register-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP sent during registration
      parameters:
      - description: OTP verification request containing phone number and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyRegisterOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or OTP verification failed
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify registration OTP
      tags:
      - auth
  /protected/test:
    get:
      consumes:
      - application/json
      description: This endpoint tests the authentication middleware
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Test protected endpoint
      tags:
      - Protected
  /user/get-profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the authenticated user
      parameters:
      - description: Bearer <access_token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetUserProfileResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
swagger: "2.0"
