definitions:
  helper.Response:
    properties:
      data: {}
      error:
        type: string
      message_en:
        type: string
      message_vi:
        type: string
      success:
        type: boolean
    type: object
  schemas.DeleteUserRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.GeoCodeLocation:
    properties:
      distance:
        description: Distance from the location (in kilometers) for which the geocode
          is performed
        type: number
      formatted_address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      main_address:
        description: Main address of the location
        type: string
      place_id:
        type: string
      secondary_address:
        type: string
    type: object
  schemas.GeoCodeLocationResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/schemas.GeoCodeLocation'
        type: array
    type: object
  schemas.GeoCodeRequest:
    properties:
      current_location:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Current location of the user
      point:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Point for which the geocode is performed
    required:
    - current_location
    - point
    type: object
  schemas.GetUserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - user
    type: object
  schemas.GetVehicleResponse:
    properties:
      vehicle:
        description: this is an array because a user can have multiple vehicles
        items:
          $ref: '#/definitions/schemas.VehicleDetail'
        type: array
    type: object
  schemas.GetVehiclesResponse:
    properties:
      vehicles:
        items:
          $ref: '#/definitions/schemas.Vehicle'
        type: array
    type: object
  schemas.GiveRideRequest:
    properties:
      place_list:
        description: Points []Point `json:"points" binding:"required"` // List of
          points for the route
        items:
          type: string
        type: array
      start_time:
        description: Start time of the ride (if not provided, the ride is immediate)
        type: string
      vehicle_id:
        description: Vehicle ID for the ride that user has registered
        type: string
    required:
    - place_list
    - vehicle_id
    type: object
  schemas.GiveRideResponse:
    properties:
      distance:
        type: number
      duration:
        type: integer
      end_time:
        type: string
      fare:
        type: number
      ride_offer_id:
        type: string
      route:
        $ref: '#/definitions/schemas.GoongDirectionsResponse'
      start_time:
        type: string
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
    type: object
  schemas.GoongAutoCompleteResponse:
    properties:
      executed_time:
        type: integer
      executed_time_all:
        type: integer
      predictions:
        items:
          $ref: '#/definitions/schemas.Prediction'
        type: array
      status:
        type: string
    type: object
  schemas.GoongDirectionsResponse:
    properties:
      geocoded_waypoints:
        items:
          properties:
            geocoder_status:
              type: string
            place_id:
              type: string
          type: object
        type: array
      routes:
        items:
          properties:
            bounds:
              description: Empty struct as the bounds are empty in the example
              type: object
            legs:
              items:
                properties:
                  distance:
                    properties:
                      text:
                        type: string
                      value:
                        type: integer
                    type: object
                  duration:
                    properties:
                      text:
                        type: string
                      value:
                        type: integer
                    type: object
                  end_address:
                    type: string
                  end_location:
                    properties:
                      lat:
                        type: number
                      lng:
                        type: number
                    type: object
                  start_address:
                    type: string
                  start_location:
                    properties:
                      lat:
                        type: number
                      lng:
                        type: number
                    type: object
                  steps:
                    items:
                      properties:
                        distance:
                          properties:
                            text:
                              type: string
                            value:
                              type: integer
                          type: object
                        duration:
                          properties:
                            text:
                              type: string
                            value:
                              type: integer
                          type: object
                        end_location:
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number
                          type: object
                        html_instructions:
                          type: string
                        maneuver:
                          type: string
                        polyline:
                          properties:
                            points:
                              type: string
                          type: object
                        start_location:
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number
                          type: object
                        travel_mode:
                          type: string
                      type: object
                    type: array
                type: object
              type: array
            overview_polyline:
              properties:
                points:
                  type: string
              type: object
            summary:
              type: string
            warnings:
              items:
                type: string
              type: array
            waypoint_order:
              items:
                type: integer
              type: array
          type: object
        type: array
    type: object
  schemas.HitchRideRequest:
    properties:
      place_list:
        description: Points []Point `json:"points" binding:"required"` // List of
          points for the route
        items:
          type: string
        type: array
      start_time:
        description: Start time of the ride (if not provided, the ride is immediate)
        type: string
    required:
    - place_list
    type: object
  schemas.HitchRideResponse:
    properties:
      distance:
        type: number
      duration:
        type: integer
      end_time:
        type: string
      ride_request_id:
        type: string
      route:
        $ref: '#/definitions/schemas.GoongDirectionsResponse'
      start_time:
        type: string
    type: object
  schemas.InitRegisterRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.InitRegisterResponse:
    properties:
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
    required:
    - is_activated
    - is_verified
    - phone_number
    type: object
  schemas.LoginRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.LoginResponse:
    properties:
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.LoginWithOAuthRequest:
    properties:
      email:
        maxLength: 256
        minLength: 3
        type: string
    required:
    - email
    type: object
  schemas.LoginWithOAuthResponse:
    properties:
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        maxLength: 11
        minLength: 9
        type: string
      user_id:
        type: string
    required:
    - full_name
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.MatchedSubstring:
    properties:
      length:
        type: integer
      offset:
        type: integer
    type: object
  schemas.PlusCode:
    properties:
      compound_code:
        type: string
      global_code:
        type: string
    type: object
  schemas.Point:
    properties:
      lat:
        description: Latitude
        type: number
      lng:
        description: Longitude
        type: number
    type: object
  schemas.Prediction:
    properties:
      description:
        type: string
      display_type:
        type: string
      distance:
        description: Distance from the location (in kilometers) for which the autocomplete
          is performed
        type: number
      has_children:
        type: boolean
      matched_substrings:
        items:
          $ref: '#/definitions/schemas.MatchedSubstring'
        type: array
      place_id:
        type: string
      plus_code:
        $ref: '#/definitions/schemas.PlusCode'
      reference:
        type: string
      score:
        type: number
      structured_formatting:
        $ref: '#/definitions/schemas.StructuredFormatting'
      terms:
        items:
          $ref: '#/definitions/schemas.Term'
        type: array
    type: object
  schemas.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    required:
    - access_token
    - refresh_token
    - user_id
    type: object
  schemas.RegisterDeviceTokenRequest:
    properties:
      device_token:
        type: string
    required:
    - device_token
    type: object
  schemas.RegisterUserRequest:
    properties:
      email:
        maxLength: 256
        type: string
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      phone_number:
        type: string
    required:
    - full_name
    - phone_number
    type: object
  schemas.RegisterUserResponse:
    properties:
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - full_name
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.RegisterVehicleRequest:
    properties:
      ca_vet:
        type: string
      license_plate:
        type: string
      user_id:
        type: string
      vehicle_id:
        description: this id from the vehicle_type table in the database
        type: string
    required:
    - ca_vet
    - license_plate
    - user_id
    - vehicle_id
    type: object
  schemas.ResendOTPRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.RideOfferDetail:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: number
      ride_offer_id:
        type: string
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
    type: object
  schemas.RideRequestDetail:
    properties:
      distance:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/schemas.UserInfo'
    type: object
  schemas.StructuredFormatting:
    properties:
      main_text:
        type: string
      secondary_text:
        type: string
    type: object
  schemas.SuggestRideOfferRequest:
    properties:
      ride_request_id:
        description: Ride request ID for which the user wants to suggest a ride offer
        type: string
    required:
    - ride_request_id
    type: object
  schemas.SuggestRideOfferResponse:
    properties:
      ride_offers:
        items:
          $ref: '#/definitions/schemas.RideOfferDetail'
        type: array
    type: object
  schemas.SuggestRideRequestRequest:
    properties:
      ride_offer_id:
        description: Ride offer ID for which the user wants to suggest a ride request
        type: string
    required:
    - ride_offer_id
    type: object
  schemas.SuggestRideRequestResponse:
    properties:
      ride_requests:
        items:
          $ref: '#/definitions/schemas.RideRequestDetail'
        type: array
    type: object
  schemas.Term:
    properties:
      offset:
        type: integer
      value:
        type: string
    type: object
  schemas.UpdateUserProfileRequest:
    properties:
      email:
        maxLength: 256
        type: string
      full_name:
        description: Email is optional
        maxLength: 256
        minLength: 3
        type: string
      phone_number:
        type: string
    required:
    - full_name
    - phone_number
    type: object
  schemas.UpdateUserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - user
    type: object
  schemas.UserInfo:
    properties:
      full_name:
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    type: object
  schemas.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      role:
        type: string
      updated_at:
        type: string
    required:
    - id
    type: object
  schemas.Vehicle:
    properties:
      fuel_consumed:
        type: number
      name:
        type: string
      vehicle_id:
        type: string
    required:
    - vehicle_id
    type: object
  schemas.VehicleDetail:
    properties:
      fuel_consumed:
        type: number
      license_plate:
        type: string
      name:
        type: string
      vehicle_id:
        type: string
    required:
    - vehicle_id
    type: object
  schemas.VerifyCCCDResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - access_token
    - refresh_token
    - user
    type: object
  schemas.VerifyLoginOTPRequest:
    properties:
      otp:
        maxLength: 6
        minLength: 6
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - otp
    - phone_number
    - user_id
    type: object
  schemas.VerifyLoginOTPResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - access_token
    - refresh_token
    - user
    type: object
  schemas.VerifyRegisterOTPRequest:
    properties:
      otp:
        maxLength: 6
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - otp
    - phone_number
    type: object
info:
  contact: {}
paths:
  /auth/delete-user:
    post:
      consumes:
      - application/json
      description: Delete the user from the provided phone number in the database
        (only available in dev environment)
      parameters:
      - description: Delete user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Delete a user
      tags:
      - auth
  /auth/init-register:
    post:
      consumes:
      - application/json
      description: Start the registration process by sending an OTP to the provided
        phone number
      parameters:
      - description: Registration initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.InitRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.InitRegisterResponse'
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Initialize user registration
      tags:
      - auth
  /auth/login-oauth:
    post:
      consumes:
      - application/json
      description: Authenticates a user using OAuth2 and sends an OTP to their phone
        number
      parameters:
      - description: OAuth2 login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginWithOAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginWithOAuthResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login with OAuth2
      tags:
      - auth
  /auth/login-phone:
    post:
      consumes:
      - application/json
      description: Initiates login process by sending OTP to the provided phone number
      parameters:
      - description: Phone number for login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login with phone number
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by revoking their refresh token from the database
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Logout user and revoke the token
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Validates the refresh token and issues a new access token
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RefreshTokenResponse'
              type: object
        "400":
          description: Invalid refresh token or authorization header
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Refresh token and return new access token for the user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Starts the registration process and creates a user account
      parameters:
      - description: Registration request containing phone number, full name, and
          optional email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RegisterUserResponse'
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resends the OTP to the provided phone number for user verification
      parameters:
      - description: OTP resend request containing phone number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.ResendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Resend OTP
      tags:
      - auth
  /auth/verify-cccd:
    post:
      consumes:
      - multipart/form-data
      description: Verifies the front and back images of a user's CCCD, saves the
        information, and updates user status
      parameters:
      - description: Front image of CCCD
        in: formData
        name: front_image
        required: true
        type: file
      - description: Back image of CCCD
        in: formData
        name: back_image
        required: true
        type: file
      - description: User ID (UUID format)
        in: formData
        name: user_id
        required: true
        type: string
      - description: User's phone number (9-11 digits)
        in: formData
        name: phone_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CCCD verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VerifyCCCDResponse'
              type: object
        "400":
          description: Invalid request or CCCD info
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify user's CCCD (Citizen Identity Card)
      tags:
      - auth
  /auth/verify-login-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP for login, creates a user session, and returns
        user info with access and refresh tokens
      parameters:
      - description: OTP verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyLoginOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VerifyLoginOTPResponse'
              type: object
        "400":
          description: Invalid request body or OTP verification failed
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create session
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify login OTP and create user session
      tags:
      - auth
  /auth/verify-register-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP sent during registration
      parameters:
      - description: OTP verification request containing phone number and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyRegisterOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or OTP verification failed
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify registration OTP
      tags:
      - auth
  /map/autocomplete:
    get:
      consumes:
      - application/json
      description: Returns a list of places that match the query string
      parameters:
      - description: Input string to search for
        in: query
        name: input
        required: true
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Location coordinates (lat,lng)
        in: query
        name: location
        type: string
      - description: Search radius in meters
        in: query
        name: radius
        type: integer
      - description: Include more compound results
        in: query
        name: more_compound
        type: boolean
      - description: Current location coordinates (lat,lng)
        in: query
        name: current_location
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved autocomplete data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GoongAutoCompleteResponse'
              type: object
        "400":
          description: Invalid request query
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to get autocomplete data
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get autocomplete suggestions for places
      tags:
      - map
  /map/geocode:
    post:
      consumes:
      - application/json
      description: Retrieves geocode information for a specified latitude and longitude
      parameters:
      - description: Geocode request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GeoCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved geocode data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GeoCodeLocationResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to get geocode data
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get geocode data for a given point
      tags:
      - map
  /map/give-ride:
    post:
      consumes:
      - application/json
      description: Receives a list of points and returns a route and polyline encoded
        string for the driver
      parameters:
      - description: Give ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GiveRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created route
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GiveRideResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create route
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Create a route for a driver's give ride
      tags:
      - map
  /map/hitch-ride:
    post:
      consumes:
      - application/json
      description: Receives a list of points and returns a route and polyline encoded
        string for the passenger
      parameters:
      - description: Hitch ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.HitchRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created route
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.HitchRideResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create route
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Create a route for a passenger's hitch ride
      tags:
      - map
  /map/suggest-give-rides:
    post:
      consumes:
      - application/json
      description: Returns a list of ride offers that match the business rules for
        the hitcher (ride request)
      parameters:
      - description: Ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SuggestRideOfferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved suggested ride offers
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SuggestRideOfferResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Suggest ride offers for a hitcher
      tags:
      - map
  /map/suggest-hitch-rides:
    post:
      consumes:
      - application/json
      description: Returns a list of ride requests that match the business rules for
        the rider (ride offer)
      parameters:
      - description: Ride offer ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SuggestRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved suggested ride requests
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SuggestRideRequestResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Suggest ride requests for a rider (ride offer)
      tags:
      - map
  /protected/test:
    get:
      consumes:
      - application/json
      description: This endpoint tests the authentication middleware
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Test protected endpoint
      tags:
      - Protected
  /user/get-profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.GetUserProfileResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
  /user/register-device-token:
    post:
      consumes:
      - application/json
      description: Registers the device token for the authenticated user to enable
        push notifications via Firebase Cloud Messaging
      parameters:
      - description: Device token registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterDeviceTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered device token
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request or validation error
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Register device token for push notifications
      tags:
      - user
  /user/update-profile:
    post:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: User profile update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UpdateUserProfileResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
  /vehicle/get-vehicle:
    get:
      consumes:
      - application/json
      description: Retrieves and returns a detailed list of vehicles for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved vehicles
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetVehicleResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get user's vehicles
      tags:
      - vehicle
  /vehicle/register-vehicle:
    post:
      consumes:
      - application/json
      description: Register a new vehicle for the authenticated user
      parameters:
      - description: Vehicle registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterVehicleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered vehicle
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Register a new vehicle
      tags:
      - vehicle
  /vehicle/vehicles:
    get:
      consumes:
      - application/json
      description: Retrieves and returns the list of vehicles for user to select when
        registering a vehicle
      parameters:
      - description: Input string to search for
        in: query
        name: input
        required: true
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        required: true
        type: integer
      - description: Page number for pagination purposes
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved vehicles
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetVehiclesResponse'
              type: object
        "500":
          description: Failed to get vehicles
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get list of vehicles
      tags:
      - vehicle
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
