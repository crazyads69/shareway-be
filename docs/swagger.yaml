definitions:
  helper.Response:
    properties:
      data: {}
      error:
        type: string
      message_en:
        type: string
      message_vi:
        type: string
      success:
        type: boolean
    type: object
  schemas.AcceptGiveRideRequestRequest:
    properties:
      receiverID:
        description: The ID of the receiver (the user who received the request) aka
          the hitcher
        type: string
      rideOfferID:
        description: The ID of the ride offer (current user is the driver)
        type: string
      rideRequestID:
        description: The ID of the ride request (the user received request is the
          hitcher)
        type: string
      vehicleID:
        description: The ID of the vehicle
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    - vehicleID
    type: object
  schemas.AcceptGiveRideRequestResponse:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      receiver_id:
        type: string
      ride_id:
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      transaction:
        $ref: '#/definitions/schemas.TransactionDetail'
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.AcceptHitchRideRequestRequest:
    properties:
      receiverID:
        description: The ID of the receiver (the user who received the request) aka
          the driver
        type: string
      rideOfferID:
        description: The ID of the ride offer (the user who received request is the
          driver)
        type: string
      rideRequestID:
        description: The ID of the ride request (current user is the hitcher)
        type: string
      vehicleID:
        description: The ID of the vehicle
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    - vehicleID
    type: object
  schemas.AcceptHitchRideRequestResponse:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      receiver_id:
        type: string
      ride_id:
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      transaction:
        $ref: '#/definitions/schemas.TransactionDetail'
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.AdminInfo:
    properties:
      admin_id:
        type: string
      created_at:
        type: string
      full_name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  schemas.CancelGiveRideRequestRequest:
    properties:
      receiverID:
        type: string
      rideOfferID:
        type: string
      rideRequestID:
        type: string
      vehicleID:
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    type: object
  schemas.CancelHitchRideRequestRequest:
    properties:
      receiverID:
        description: The hitcher who received the cancel request
        type: string
      rideOfferID:
        description: The hitcher who received the request
        type: string
      rideRequestID:
        description: The driver who want to cancel the ride request
        type: string
      vehicleID:
        description: The vehicle id
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    type: object
  schemas.CancelRideRequest:
    properties:
      receiverID:
        description: The receiver id (the hitcher) who received the cancel request
        type: string
      rideID:
        description: The ride id to cancel
        type: string
      vehicleID:
        type: string
    required:
    - receiverID
    - rideID
    type: object
  schemas.CancelRideResponse:
    properties:
      receiver_id:
        type: string
      ride_id:
        description: Send back id of ride offer ride request to update ui
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
    type: object
  schemas.ChatRoomResponse:
    properties:
      last_message:
        type: string
      last_message_at:
        type: string
      last_message_id:
        type: string
      receiver_info:
        $ref: '#/definitions/schemas.UserInfo'
      room_id:
        type: string
    type: object
  schemas.CheckoutRideRequest:
    properties:
      receiverID:
        description: The ID of the receiver (the user who received the request) aka
          the driver
        type: string
      rideOfferID:
        description: The ID of the ride offer (the user who received request is the
          driver)
        type: string
      rideRequestID:
        description: |-
          Use for checkout with momo
          The ID of the ride request (current user is the hitcher)
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    type: object
  schemas.CreateNotificationRequest:
    properties:
      body:
        type: string
      data:
        additionalProperties:
          type: string
        description: Additional data to be sent with the notification (optional)
        type: object
      title:
        type: string
    required:
    - body
    - title
    type: object
  schemas.CreateTestWebsocketRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  schemas.DashboardGeneralDataResponse:
    properties:
      ride_change:
        type: number
      total_rides:
        type: integer
      total_transactions:
        type: integer
      total_users:
        type: integer
      total_vehicles:
        type: integer
      transaction_change:
        type: number
      user_change:
        type: number
      vehicle_change:
        type: number
    type: object
  schemas.DeleteUserRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.EndRideRequest:
    properties:
      currentLocation:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Current user location
      rideID:
        description: Ride ID of the ride to end
        type: string
      vehicleID:
        type: string
    required:
    - currentLocation
    - rideID
    type: object
  schemas.EndRideResponse:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      receiver_id:
        type: string
      ride_id:
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      transaction:
        $ref: '#/definitions/schemas.TransactionDetail'
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.GeoCodeLocation:
    properties:
      distance:
        description: Distance from the location (in kilometers) for which the geocode
          is performed
        type: number
      formatted_address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      main_address:
        description: Main address of the location
        type: string
      place_id:
        type: string
      secondary_address:
        type: string
    type: object
  schemas.GeoCodeLocationResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/schemas.GeoCodeLocation'
        type: array
    type: object
  schemas.GeoCodeRequest:
    properties:
      current_location:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Current location of the user
      point:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Point for which the geocode is performed
    required:
    - current_location
    - point
    type: object
  schemas.GetAdminProfileResponse:
    properties:
      admin_info:
        $ref: '#/definitions/schemas.AdminInfo'
    type: object
  schemas.GetAllChatRoomsRequest:
    properties:
      userID:
        type: string
    required:
    - userID
    type: object
  schemas.GetAllChatRoomsResponse:
    properties:
      chatRooms:
        items:
          $ref: '#/definitions/schemas.ChatRoomResponse'
        type: array
    type: object
  schemas.GetAllPendingRideResponse:
    properties:
      pending_ride_offer:
        description: The pending ride offer of the user
        items:
          $ref: '#/definitions/schemas.RideOfferDetail'
        type: array
      pending_ride_request:
        description: The pending ride request of the user
        items:
          $ref: '#/definitions/schemas.RideRequestDetail'
        type: array
    type: object
  schemas.GetChatMessagesRequest:
    properties:
      chatRoomID:
        type: string
    required:
    - chatRoomID
    type: object
  schemas.GetChatMessagesResponse:
    properties:
      messages:
        items:
          $ref: '#/definitions/schemas.MessageResponse'
        type: array
    type: object
  schemas.GetRideHistoryResponse:
    properties:
      ride_history:
        description: The cancel ride request of the user
        items:
          $ref: '#/definitions/schemas.RideHistoryDetail'
        type: array
    type: object
  schemas.GetUserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - user
    type: object
  schemas.GetVehicleResponse:
    properties:
      vehicle:
        description: this is an array because a user can have multiple vehicles
        items:
          $ref: '#/definitions/schemas.VehicleDetail'
        type: array
    type: object
  schemas.GetVehiclesResponse:
    properties:
      vehicles:
        items:
          $ref: '#/definitions/schemas.Vehicle'
        type: array
    type: object
  schemas.GiveRideRequest:
    properties:
      place_list:
        description: Points []Point `json:"points" binding:"required"` // List of
          points for the route
        items:
          type: string
        type: array
      start_time:
        description: Start time of the ride (if not provided, the ride is immediate)
        type: string
      vehicle_id:
        description: Vehicle ID for the ride that user has registered
        type: string
    required:
    - place_list
    - vehicle_id
    type: object
  schemas.GiveRideResponse:
    properties:
      distance:
        type: number
      duration:
        type: integer
      end_time:
        type: string
      fare:
        type: integer
      ride_offer_id:
        type: string
      route:
        $ref: '#/definitions/schemas.GoongDirectionsResponse'
      start_time:
        type: string
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.GoongAutoCompleteResponse:
    properties:
      executed_time:
        type: integer
      executed_time_all:
        type: integer
      predictions:
        items:
          $ref: '#/definitions/schemas.Prediction'
        type: array
      status:
        type: string
    type: object
  schemas.GoongDirectionsResponse:
    properties:
      geocoded_waypoints:
        items:
          properties:
            geocoder_status:
              type: string
            place_id:
              type: string
          type: object
        type: array
      routes:
        items:
          properties:
            bounds:
              description: Empty struct as the bounds are empty in the example
              type: object
            legs:
              items:
                properties:
                  distance:
                    properties:
                      text:
                        type: string
                      value:
                        type: integer
                    type: object
                  duration:
                    properties:
                      text:
                        type: string
                      value:
                        type: integer
                    type: object
                  end_address:
                    type: string
                  end_location:
                    properties:
                      lat:
                        type: number
                      lng:
                        type: number
                    type: object
                  start_address:
                    type: string
                  start_location:
                    properties:
                      lat:
                        type: number
                      lng:
                        type: number
                    type: object
                  steps:
                    items:
                      properties:
                        distance:
                          properties:
                            text:
                              type: string
                            value:
                              type: integer
                          type: object
                        duration:
                          properties:
                            text:
                              type: string
                            value:
                              type: integer
                          type: object
                        end_location:
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number
                          type: object
                        html_instructions:
                          type: string
                        maneuver:
                          type: string
                        polyline:
                          properties:
                            points:
                              type: string
                          type: object
                        start_location:
                          properties:
                            lat:
                              type: number
                            lng:
                              type: number
                          type: object
                        travel_mode:
                          type: string
                      type: object
                    type: array
                type: object
              type: array
            overview_polyline:
              properties:
                points:
                  type: string
              type: object
            summary:
              type: string
            warnings:
              items:
                type: string
              type: array
            waypoint_order:
              items:
                type: integer
              type: array
          type: object
        type: array
    type: object
  schemas.HitchRideRequest:
    properties:
      place_list:
        description: Points []Point `json:"points" binding:"required"` // List of
          points for the route
        items:
          type: string
        type: array
      start_time:
        description: Start time of the ride (if not provided, the ride is immediate)
        type: string
    required:
    - place_list
    type: object
  schemas.HitchRideResponse:
    properties:
      distance:
        type: number
      duration:
        type: integer
      end_time:
        type: string
      ride_request_id:
        type: string
      route:
        $ref: '#/definitions/schemas.GoongDirectionsResponse'
      start_time:
        type: string
    type: object
  schemas.InitRegisterRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.InitRegisterResponse:
    properties:
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
    required:
    - is_activated
    - is_verified
    - phone_number
    type: object
  schemas.InitiateCallResponse:
    properties:
      call_id:
        description: the call id is the message id of the chat message
        type: string
      caller_id:
        type: string
      chatroom_id:
        type: string
      receiver_id:
        type: string
      token:
        type: string
    type: object
  schemas.LinkMomoRequest:
    properties:
      walletPhoneNumber:
        description: |-
          Different from phoneNumber that is used for login
          This is the phone number that is registered with momo wallet
        maxLength: 10
        minLength: 10
        type: string
    required:
    - walletPhoneNumber
    type: object
  schemas.LoginAdminRequest:
    properties:
      password:
        maxLength: 255
        minLength: 6
        type: string
      username:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  schemas.LoginAdminResponse:
    properties:
      admin_info:
        $ref: '#/definitions/schemas.AdminInfo'
      token:
        type: string
    type: object
  schemas.LoginRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.LoginResponse:
    properties:
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.LoginWithOAuthRequest:
    properties:
      email:
        maxLength: 256
        minLength: 3
        type: string
    required:
    - email
    type: object
  schemas.LoginWithOAuthResponse:
    properties:
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        maxLength: 11
        minLength: 9
        type: string
      user_id:
        type: string
    required:
    - full_name
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.MatchedSubstring:
    properties:
      length:
        type: integer
      offset:
        type: integer
    type: object
  schemas.MessageResponse:
    properties:
      created_at:
        type: string
      message:
        type: string
      message_id:
        type: string
      message_type:
        description: text or image or call and missed_call
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
    type: object
  schemas.MoMoIPN:
    properties:
      amount:
        type: integer
      callbackToken:
        type: string
      extraData:
        type: string
      message:
        type: string
      orderId:
        type: string
      orderInfo:
        type: string
      orderType:
        type: string
      partnerClientId:
        type: string
      partnerCode:
        type: string
      payType:
        type: string
      requestId:
        type: string
      responseTime:
        type: integer
      resultCode:
        type: integer
      signature:
        type: string
      transId:
        type: integer
    type: object
  schemas.PlusCode:
    properties:
      compound_code:
        type: string
      global_code:
        type: string
    type: object
  schemas.Point:
    properties:
      lat:
        description: Latitude
        type: number
      lng:
        description: Longitude
        type: number
    type: object
  schemas.Prediction:
    properties:
      description:
        type: string
      display_type:
        type: string
      distance:
        description: Distance from the location (in kilometers) for which the autocomplete
          is performed
        type: number
      has_children:
        type: boolean
      matched_substrings:
        items:
          $ref: '#/definitions/schemas.MatchedSubstring'
        type: array
      place_id:
        type: string
      plus_code:
        $ref: '#/definitions/schemas.PlusCode'
      reference:
        type: string
      score:
        type: number
      structured_formatting:
        $ref: '#/definitions/schemas.StructuredFormatting'
      terms:
        items:
          $ref: '#/definitions/schemas.Term'
        type: array
    type: object
  schemas.RatingRideDriverRequest:
    properties:
      rating:
        description: The rating of the driver
        maximum: 5
        minimum: 1
        type: number
      receiver_id:
        description: The receiver id (the driver) who received the rating
        type: string
      review:
        description: The review of the driver
        type: string
      ride_id:
        description: The ID of the ride
        type: string
    required:
    - rating
    - receiver_id
    - ride_id
    type: object
  schemas.RatingRideHitcherRequest:
    properties:
      rating:
        description: The rating of the driver
        maximum: 5
        minimum: 1
        type: number
      receiverID:
        description: The receiver id (the hitcher) who received the rating
        type: string
      review:
        description: The review of the driver
        type: string
      rideID:
        description: The ID of the ride to rate
        type: string
    required:
    - rating
    - receiverID
    - rideID
    type: object
  schemas.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    required:
    - access_token
    - refresh_token
    - user_id
    type: object
  schemas.RefundMomoRequest:
    properties:
      rideOfferID:
        type: string
      rideRequestID:
        description: |-
          The ID of the ride request (current user is the hitcher)
          The ride request contains then transaction ID from momo so could use for refund when needed (ride canceled, cannot create ride, etc)
        type: string
    required:
    - rideOfferID
    - rideRequestID
    type: object
  schemas.RegisterDeviceTokenRequest:
    properties:
      device_token:
        type: string
    required:
    - device_token
    type: object
  schemas.RegisterUserRequest:
    properties:
      email:
        maxLength: 256
        type: string
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      phone_number:
        type: string
    required:
    - full_name
    - phone_number
    type: object
  schemas.RegisterUserResponse:
    properties:
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      is_activated:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - full_name
    - is_activated
    - is_verified
    - phone_number
    - user_id
    type: object
  schemas.RegisterVehicleRequest:
    properties:
      ca_vet:
        type: string
      license_plate:
        type: string
      user_id:
        type: string
      vehicle_id:
        description: this id from the vehicle_type table in the database
        type: string
    required:
    - ca_vet
    - license_plate
    - user_id
    - vehicle_id
    type: object
  schemas.ResendOTPRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  schemas.RideDashboardDataResponse:
    properties:
      ride_stats:
        items:
          $ref: '#/definitions/schemas.StatPoint'
        type: array
    type: object
  schemas.RideHistoryDetail:
    properties:
      distance:
        type: number
      driver:
        $ref: '#/definitions/schemas.UserInfo'
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      hitcher:
        $ref: '#/definitions/schemas.UserInfo'
      ride_id:
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      transaction:
        $ref: '#/definitions/schemas.TransactionDetail'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.RideOfferDetail:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      ride_offer_id:
        type: string
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.RideRequestDetail:
    properties:
      distance:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/schemas.UserInfo'
    type: object
  schemas.SearchUsersRequest:
    properties:
      search_input:
        description: Search input can be username or phonenuber
        type: string
    required:
    - search_input
    type: object
  schemas.SearchUsersResponse:
    properties:
      chatRooms:
        description: Return chat rooms with the searched user
        items:
          $ref: '#/definitions/schemas.ChatRoomResponse'
        type: array
    type: object
  schemas.SendGiveRideRequestRequest:
    properties:
      receiverID:
        description: The ID of the receiver (the user who received the request) aka
          the hitcher
        type: string
      rideOfferID:
        description: The ID of the ride offer (current user is the driver)
        type: string
      rideRequestID:
        description: The ID of the ride request (the user received request is the
          hitcher)
        type: string
      vehicleID:
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    - vehicleID
    type: object
  schemas.SendHitchRideRequestRequest:
    properties:
      receiverID:
        description: The ID of the receiver (the user who received the request) aka
          the driver
        type: string
      rideOfferID:
        description: The ID of the ride offer (the user who received request is the
          driver)
        type: string
      rideRequestID:
        description: The ID of the ride request (current user is the hitcher)
        type: string
      vehicleID:
        type: string
    required:
    - receiverID
    - rideOfferID
    - rideRequestID
    type: object
  schemas.SendImageResponse:
    properties:
      created_at:
        type: string
      message:
        type: string
      message_id:
        type: string
      message_type:
        description: text or image or call and missed_call
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
    type: object
  schemas.SendMessageRequest:
    properties:
      chatRoomID:
        type: string
      message:
        description: Default type is "text"
        type: string
      receiverID:
        type: string
    required:
    - chatRoomID
    - message
    - receiverID
    type: object
  schemas.SendMessageResponse:
    properties:
      created_at:
        type: string
      message:
        type: string
      message_id:
        type: string
      message_type:
        description: text or image or call and missed_call
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
    type: object
  schemas.StartRideRequest:
    properties:
      currentLocation:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Current user location
      rideID:
        description: Ride ID of the ride to start
        type: string
      vehicleID:
        type: string
    required:
    - currentLocation
    - rideID
    type: object
  schemas.StartRideResponse:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      receiver_id:
        type: string
      ride_id:
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      transaction:
        $ref: '#/definitions/schemas.TransactionDetail'
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.StatPoint:
    properties:
      count:
        type: integer
      date:
        type: string
      total:
        description: For transaction total amount
        type: integer
    type: object
  schemas.StructuredFormatting:
    properties:
      main_text:
        type: string
      secondary_text:
        type: string
    type: object
  schemas.SuggestRideOfferRequest:
    properties:
      ride_request_id:
        description: Ride request ID for which the user wants to suggest a ride offer
        type: string
    required:
    - ride_request_id
    type: object
  schemas.SuggestRideOfferResponse:
    properties:
      ride_offers:
        items:
          $ref: '#/definitions/schemas.RideOfferDetail'
        type: array
    type: object
  schemas.SuggestRideRequestRequest:
    properties:
      ride_offer_id:
        description: Ride offer ID for which the user wants to suggest a ride request
        type: string
    required:
    - ride_offer_id
    type: object
  schemas.SuggestRideRequestResponse:
    properties:
      ride_requests:
        items:
          $ref: '#/definitions/schemas.RideRequestDetail'
        type: array
    type: object
  schemas.Term:
    properties:
      offset:
        type: integer
      value:
        type: string
    type: object
  schemas.TransactionDashboardDataResponse:
    properties:
      transaction_stats:
        items:
          $ref: '#/definitions/schemas.StatPoint'
        type: array
    type: object
  schemas.TransactionDetail:
    properties:
      amount:
        type: integer
      payment_method:
        type: string
      status:
        type: string
      transaction_id:
        type: string
    type: object
  schemas.UpdateAvatarResponse:
    properties:
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - user
    type: object
  schemas.UpdateCallStatusRequest:
    properties:
      callID:
        type: string
      callType:
        enum:
        - call
        - missed_call
        type: string
      chatRoomID:
        type: string
      duration:
        description: Remove required validation because it is not parse from the validation
          if it is 0
        minimum: 0
        type: integer
      receiverID:
        type: string
    required:
    - callID
    - callType
    - chatRoomID
    - receiverID
    type: object
  schemas.UpdateCallStatusResponse:
    properties:
      chat_room_id:
        type: string
      created_at:
        description: Call status update time
        type: string
      message:
        description: Call status message
        type: string
      message_id:
        type: string
      message_type:
        description: text or image or missed_call or call
        type: string
      receiver_id:
        description: User who received the call
        type: string
      sender_id:
        description: User who initiated the call
        type: string
    type: object
  schemas.UpdateRideLocationRequest:
    properties:
      currentLocation:
        allOf:
        - $ref: '#/definitions/schemas.Point'
        description: Current driver location
      rideID:
        description: Ride ID of the ride to update location
        type: string
      vehicleID:
        type: string
    required:
    - currentLocation
    - rideID
    type: object
  schemas.UpdateRideLocationResponse:
    properties:
      distance:
        type: number
      driver_current_latitude:
        type: number
      driver_current_longitude:
        type: number
      duration:
        type: integer
      encoded_polyline:
        type: string
      end_address:
        type: string
      end_latitude:
        type: number
      end_longitude:
        type: number
      end_time:
        type: string
      fare:
        type: integer
      receiver_id:
        type: string
      ride_id:
        type: string
      ride_offer_id:
        type: string
      ride_request_id:
        type: string
      rider_current_latitude:
        type: number
      rider_current_longitude:
        type: number
      start_address:
        type: string
      start_latitude:
        type: number
      start_longitude:
        type: number
      start_time:
        type: string
      status:
        type: string
      transaction:
        $ref: '#/definitions/schemas.TransactionDetail'
      user:
        $ref: '#/definitions/schemas.UserInfo'
      vehicle:
        $ref: '#/definitions/schemas.VehicleDetail'
      waypoints:
        items:
          $ref: '#/definitions/schemas.Waypoint'
        type: array
    type: object
  schemas.UpdateUserProfileRequest:
    properties:
      email:
        maxLength: 256
        type: string
      full_name:
        maxLength: 256
        minLength: 3
        type: string
      gender:
        enum:
        - male
        - female
        type: string
    required:
    - full_name
    - gender
    type: object
  schemas.UpdateUserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - user
    type: object
  schemas.UserDashboardDataResponse:
    properties:
      user_stats:
        items:
          $ref: '#/definitions/schemas.StatPoint'
        type: array
    type: object
  schemas.UserDetail:
    properties:
      avatar_url:
        type: string
      average_rating:
        type: number
      balance_in_app:
        type: integer
      cccd_number:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      is_activated:
        type: boolean
      is_momo_linked:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      role:
        type: string
      total_ratings:
        type: integer
      total_rides:
        type: integer
      total_transactions:
        type: integer
      total_vehicles:
        type: integer
      updated_at:
        type: string
      vehicles:
        items:
          $ref: '#/definitions/schemas.VehicleDetail'
        type: array
    required:
    - id
    type: object
  schemas.UserInfo:
    properties:
      avatar_url:
        type: string
      average_rating:
        type: number
      balance_in_app:
        type: integer
      full_name:
        type: string
      gender:
        type: string
      is_momo_linked:
        type: boolean
      phone_number:
        type: string
      user_id:
        type: string
    type: object
  schemas.UserListResponse:
    properties:
      current_page:
        type: integer
      limit:
        type: integer
      total_pages:
        type: integer
      total_users:
        type: integer
      users:
        description: The detail user response
        items:
          $ref: '#/definitions/schemas.UserDetail'
        type: array
    type: object
  schemas.UserResponse:
    properties:
      avatar_url:
        type: string
      average_rating:
        type: number
      balance_in_app:
        type: integer
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      is_activated:
        type: boolean
      is_momo_linked:
        type: boolean
      is_verified:
        type: boolean
      phone_number:
        type: string
      role:
        type: string
      updated_at:
        type: string
    required:
    - id
    type: object
  schemas.Vehicle:
    properties:
      fuel_consumed:
        type: number
      name:
        type: string
      vehicle_id:
        type: string
    required:
    - vehicle_id
    type: object
  schemas.VehicleDashboardDataResponse:
    properties:
      vehicle_stats:
        items:
          $ref: '#/definitions/schemas.StatPoint'
        type: array
    type: object
  schemas.VehicleDetail:
    properties:
      fuel_consumed:
        type: number
      license_plate:
        type: string
      name:
        type: string
      vehicle_id:
        type: string
    required:
    - vehicle_id
    type: object
  schemas.VerifyCCCDResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - access_token
    - refresh_token
    - user
    type: object
  schemas.VerifyLoginOTPRequest:
    properties:
      otp:
        maxLength: 6
        minLength: 6
        type: string
      phone_number:
        type: string
      user_id:
        type: string
    required:
    - otp
    - phone_number
    - user_id
    type: object
  schemas.VerifyLoginOTPResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/schemas.UserResponse'
    required:
    - access_token
    - refresh_token
    - user
    type: object
  schemas.VerifyRegisterOTPRequest:
    properties:
      otp:
        maxLength: 6
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - otp
    - phone_number
    type: object
  schemas.Waypoint:
    properties:
      address:
        type: string
      lattitude:
        type: number
      longitude:
        type: number
      order:
        type: integer
      waypoint_id:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates an admin user and returns a token along with user
        information
      parameters:
      - description: The login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginAdminResponse'
              type: object
        "400":
          description: Invalid request body or input validation failed
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login as an admin
      tags:
      - admin/auth
  /admin/get-dashboard-general-data:
    get:
      consumes:
      - application/json
      description: Get the general data of the dashboard
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard general data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.DashboardGeneralDataResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the general data of the dashboard
      tags:
      - admin
  /admin/get-profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the admin
      produces:
      - application/json
      responses:
        "200":
          description: Admin profile
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetAdminProfileResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the profile of the admin
      tags:
      - admin
  /admin/get-ride-dashboard-data:
    get:
      consumes:
      - application/json
      description: Get the data of the dashboard for the ride
      parameters:
      - description: Filter for the data (all_time, last_week, last_month, last_year,
          custom)
        in: query
        name: filter
        required: true
        type: string
      - description: Start date for custom filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date for custom filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ride dashboard data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RideDashboardDataResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the data of the dashboard for the ride
      tags:
      - admin
  /admin/get-transaction-dashboard-data:
    get:
      consumes:
      - application/json
      description: Get the data of the dashboard for the transaction
      parameters:
      - description: Filter for the data (all_time, last_week, last_month, last_year,
          custom)
        in: query
        name: filter
        required: true
        type: string
      - description: Start date for custom filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date for custom filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction dashboard data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.TransactionDashboardDataResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the data of the dashboard for the transaction
      tags:
      - admin
  /admin/get-user-dashboard-data:
    get:
      consumes:
      - application/json
      description: Get the data of the dashboard for the user
      parameters:
      - description: Filter for the data (all_time, last_week, last_month, last_year,
          custom)
        in: query
        name: filter
        required: true
        type: string
      - description: Start date for custom filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date for custom filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User dashboard data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UserDashboardDataResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the data of the dashboard for the user
      tags:
      - admin
  /admin/get-user-list:
    get:
      consumes:
      - application/json
      description: Get the list of users with pagination and filters
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        required: true
        type: integer
      - description: Limit number for pagination (max 100)
        in: query
        name: limit
        required: true
        type: integer
      - description: Start date for custom filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date for custom filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - description: Optional filter for is_activated
        in: query
        name: is_activated
        type: boolean
      - description: Optional filter for is_verified
        in: query
        name: is_verified
        type: boolean
      - description: Optional filter for full name
        in: query
        name: search_full_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User list
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UserListResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the list of users with pagination and filters
      tags:
      - admin
  /admin/get-vehicle-dashboard-data:
    get:
      consumes:
      - application/json
      description: Get the data of the dashboard for the vehicle
      parameters:
      - description: Filter for the data (all_time, last_week, last_month, last_year,
          custom)
        in: query
        name: filter
        required: true
        type: string
      - description: Start date for custom filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date for custom filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Vehicle dashboard data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VehicleDashboardDataResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get the data of the dashboard for the vehicle
      tags:
      - admin
  /auth/delete-user:
    post:
      consumes:
      - application/json
      description: Delete the user from the provided phone number in the database
        (only available in dev environment)
      parameters:
      - description: Delete user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Delete a user
      tags:
      - auth
  /auth/init-register:
    post:
      consumes:
      - application/json
      description: Start the registration process by sending an OTP to the provided
        phone number
      parameters:
      - description: Registration initialization request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.InitRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.InitRegisterResponse'
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Initialize user registration
      tags:
      - auth
  /auth/login-oauth:
    post:
      consumes:
      - application/json
      description: Authenticates a user using OAuth2 and sends an OTP to their phone
        number
      parameters:
      - description: OAuth2 login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginWithOAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginWithOAuthResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login with OAuth2
      tags:
      - auth
  /auth/login-phone:
    post:
      consumes:
      - application/json
      description: Initiates login process by sending OTP to the provided phone number
      parameters:
      - description: Phone number for login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.LoginResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "404":
          description: User does not exist
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Login with phone number
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by revoking their refresh token from the database
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Logout user and revoke the token
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Validates the refresh token and issues a new access token
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RefreshTokenResponse'
              type: object
        "400":
          description: Invalid refresh token or authorization header
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Refresh token and return new access token for the user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Starts the registration process and creates a user account
      parameters:
      - description: Registration request containing phone number, full name, and
          optional email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.RegisterUserResponse'
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resends the OTP to the provided phone number for user verification
      parameters:
      - description: OTP resend request containing phone number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.ResendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Resend OTP
      tags:
      - auth
  /auth/verify-cccd:
    post:
      consumes:
      - multipart/form-data
      description: Verifies the front and back images of a user's CCCD, saves the
        information, and updates user status
      parameters:
      - description: Front image of CCCD
        in: formData
        name: front_image
        required: true
        type: file
      - description: Back image of CCCD
        in: formData
        name: back_image
        required: true
        type: file
      - description: User ID (UUID format)
        in: formData
        name: user_id
        required: true
        type: string
      - description: User's phone number (9-11 digits)
        in: formData
        name: phone_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CCCD verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VerifyCCCDResponse'
              type: object
        "400":
          description: Invalid request or CCCD info
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify user's CCCD (Citizen Identity Card)
      tags:
      - auth
  /auth/verify-login-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP for login, creates a user session, and returns
        user info with access and refresh tokens
      parameters:
      - description: OTP verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyLoginOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.VerifyLoginOTPResponse'
              type: object
        "400":
          description: Invalid request body or OTP verification failed
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create session
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify login OTP and create user session
      tags:
      - auth
  /auth/verify-register-otp:
    post:
      consumes:
      - application/json
      description: Verifies the OTP sent during registration
      parameters:
      - description: OTP verification request containing phone number and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyRegisterOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or OTP verification failed
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Verify registration OTP
      tags:
      - auth
  /chat/get-chat-messages:
    post:
      consumes:
      - application/json
      description: Get all messages of a chat room
      parameters:
      - description: Get chat messages request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GetChatMessagesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chat messages fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetChatMessagesResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get all messages of a chat room
      tags:
      - chat
  /chat/get-chat-rooms:
    post:
      consumes:
      - application/json
      description: Get all chat rooms of a user
      parameters:
      - description: Get all chat rooms request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GetAllChatRoomsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chat rooms fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetAllChatRoomsResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get all chat rooms of a user
      tags:
      - chat
  /chat/initiate-call:
    get:
      consumes:
      - application/json
      description: Initiate a call with a user (from user to user 1:1) using Agora
        RTC
      parameters:
      - description: Chat room ID
        in: query
        name: chatRoomID
        required: true
        type: string
      - description: Receiver ID
        in: query
        name: receiverID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Call initiated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.InitiateCallResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Initiate a call with a user (from user to user 1:1) using Agora RTC
      tags:
      - chat
  /chat/search-users:
    post:
      consumes:
      - application/json
      description: Search for users by full name (case-insensitive) that have matched
        with user
      parameters:
      - description: Search users request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SearchUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Users fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SearchUsersResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Search for users by full name (case-insensitive) that have matched
        with user
      tags:
      - chat
  /chat/send-image:
    post:
      consumes:
      - multipart/form-data
      description: Send an image to the chat room
      parameters:
      - description: Chat room ID
        in: formData
        name: chatRoomID
        required: true
        type: string
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      - description: Receiver ID
        in: formData
        name: receiverID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Image sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SendImageResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Send an image to the chat room
      tags:
      - chat
  /chat/send-message:
    post:
      consumes:
      - application/json
      description: Send a message to the chat room
      parameters:
      - description: Send message request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SendMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SendMessageResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Send a message to the chat room
      tags:
      - chat
  /chat/update-call-status:
    post:
      consumes:
      - application/json
      description: Update the call status of a chat room (missed, rejected, ended)
      parameters:
      - description: Update call status request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateCallStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Call status updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UpdateCallStatusResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Update the call status of a chat room (missed, rejected, ended)
      tags:
      - chat
  /ipn/handle-ipn:
    post:
      consumes:
      - application/json
      description: Handle IPN from payment gateway
      parameters:
      - description: MoMo IPN
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.MoMoIPN'
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Handle IPN from payment gateway
      tags:
      - ipn
  /map/autocomplete:
    get:
      consumes:
      - application/json
      description: Returns a list of places that match the query string
      parameters:
      - description: Input string to search for
        in: query
        name: input
        required: true
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Location coordinates (lat,lng)
        in: query
        name: location
        type: string
      - description: Search radius in meters
        in: query
        name: radius
        type: integer
      - description: Include more compound results
        in: query
        name: more_compound
        type: boolean
      - description: Current location coordinates (lat,lng)
        in: query
        name: current_location
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved autocomplete data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GoongAutoCompleteResponse'
              type: object
        "400":
          description: Invalid request query
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to get autocomplete data
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get autocomplete suggestions for places
      tags:
      - map
  /map/geocode:
    post:
      consumes:
      - application/json
      description: Retrieves geocode information for a specified latitude and longitude
      parameters:
      - description: Geocode request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GeoCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved geocode data
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GeoCodeLocationResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to get geocode data
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get geocode data for a given point
      tags:
      - map
  /map/give-ride:
    post:
      consumes:
      - application/json
      description: Receives a list of points and returns a route and polyline encoded
        string for the driver
      parameters:
      - description: Give ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.GiveRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created route
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GiveRideResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create route
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Create a route for a driver's give ride
      tags:
      - map
  /map/hitch-ride:
    post:
      consumes:
      - application/json
      description: Receives a list of points and returns a route and polyline encoded
        string for the passenger
      parameters:
      - description: Hitch ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.HitchRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created route
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.HitchRideResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Failed to create route
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Create a route for a passenger's hitch ride
      tags:
      - map
  /map/suggest-give-rides:
    post:
      consumes:
      - application/json
      description: Returns a list of ride offers that match the business rules for
        the hitcher (ride request)
      parameters:
      - description: Ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SuggestRideOfferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved suggested ride offers
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SuggestRideOfferResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Suggest ride offers for a hitcher
      tags:
      - map
  /map/suggest-hitch-rides:
    post:
      consumes:
      - application/json
      description: Returns a list of ride requests that match the business rules for
        the rider (ride offer)
      parameters:
      - description: Ride offer ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SuggestRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved suggested ride requests
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.SuggestRideRequestResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Suggest ride requests for a rider (ride offer)
      tags:
      - map
  /notification/create-notification:
    post:
      consumes:
      - application/json
      description: Create a new notification to be sent to the user device using the
        FCM service
      parameters:
      - description: Create notification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created notification
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Create a new notification
      tags:
      - notification
  /notification/create-test-websocket:
    post:
      consumes:
      - application/json
      description: Create a test websocket for testing connection
      parameters:
      - description: Create test websocket request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateTestWebsocketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created test websocket
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Create a test websocket
      tags:
      - notification
  /payment/checkout-ride:
    post:
      consumes:
      - application/json
      description: Checkout ride with momo
      parameters:
      - description: Checkout ride request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.CheckoutRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Link wallet response
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Checkout ride with momo
      tags:
      - payment
  /payment/link-momo-wallet:
    post:
      consumes:
      - application/json
      description: Link momo wallet to user account
      parameters:
      - description: Link momo wallet request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.LinkMomoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Link wallet response
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Link momo wallet to user account
      tags:
      - payment
  /payment/refund-ride:
    post:
      consumes:
      - application/json
      description: Refund ride with momo wallet
      parameters:
      - description: Refund ride request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.RefundMomoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Refund ride response
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Refund ride with momo wallet
      tags:
      - payment
  /payment/withdraw-momo-wallet:
    post:
      consumes:
      - application/json
      description: Withdraw money from our system to user's momo wallet
      produces:
      - application/json
      responses:
        "200":
          description: Withdraw momo response
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Withdraw money from our system to user's momo wallet
      tags:
      - payment
  /protected/test:
    get:
      consumes:
      - application/json
      description: This endpoint tests the authentication middleware
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Test protected endpoint
      tags:
      - Protected
  /ride/accept-give-ride-request:
    post:
      consumes:
      - application/json
      description: Accept a ride offer request from the driver
      parameters:
      - description: Accept give ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.AcceptGiveRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully accepted ride offer request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.AcceptGiveRideRequestResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Accept a ride offer request from the driver
      tags:
      - ride
  /ride/accept-hitch-ride-request:
    post:
      consumes:
      - application/json
      description: Accept a ride request from the hitcher
      parameters:
      - description: Accept hitch ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.AcceptHitchRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully accepted ride request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.AcceptHitchRideRequestResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Accept a ride request from the hitcher
      tags:
      - ride
  /ride/cancel-give-ride-request:
    post:
      consumes:
      - application/json
      description: Cancel a ride offer request from the driver
      parameters:
      - description: Cancel give ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CancelGiveRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully canceled ride offer request
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Cancel a ride offer request from the driver
      tags:
      - ride
  /ride/cancel-hitch-ride-request:
    post:
      consumes:
      - application/json
      description: Cancel a ride request from the hitcher
      parameters:
      - description: Cancel hitch ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CancelHitchRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully canceled ride request
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Cancel a ride request from the hitcher
      tags:
      - ride
  /ride/cancel-ride:
    post:
      consumes:
      - application/json
      description: Cancels the ride
      parameters:
      - description: Cancel ride request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.CancelRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully canceled ride by driver
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.CancelRideResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Cancel a ride
      tags:
      - ride
  /ride/end-ride:
    post:
      consumes:
      - application/json
      description: Ends the ride between the driver and the hitcher
      parameters:
      - description: End ride request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.EndRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully ended ride
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.EndRideResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: End a ride
      tags:
      - ride
  /ride/get-all-pending-ride:
    get:
      consumes:
      - application/json
      description: Get all ride request and ride offer that are not cancelled of the
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully get all pending ride
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetAllPendingRideResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get all pending ride
      tags:
      - ride
  /ride/get-ride-history:
    get:
      consumes:
      - application/json
      description: Get ride history of the user (both as driver and hitcher) included
        cancelled rides and completed rides
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got ride history
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetRideHistoryResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get ride history of the user
      tags:
      - ride
  /ride/give-ride-request:
    post:
      consumes:
      - application/json
      description: Send a ride offer request from the driver to the hitcher
      parameters:
      - description: Give ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SendGiveRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent ride offer request
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Send a ride offer request from the driver to the hitcher
      tags:
      - ride
  /ride/hitch-ride-request:
    post:
      consumes:
      - application/json
      description: Send a ride request from the hitcher to the driver
      parameters:
      - description: Hitch ride request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.SendHitchRideRequestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent ride request
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Send a ride request from the hitcher to the driver
      tags:
      - ride
  /ride/rating-ride-driver:
    post:
      consumes:
      - application/json
      description: Rate the driver after the ride by the hitcher
      parameters:
      - description: Rating ride driver request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RatingRideDriverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully rated the driver
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Rate the driver after the ride by the hitcher
      tags:
      - ride
  /ride/rating-ride-hitcher:
    post:
      consumes:
      - application/json
      description: Rate the hitcher after the ride by the driver
      parameters:
      - description: Rating ride hitcher request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RatingRideHitcherRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully rated the hitcher
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Rate the hitcher after the ride by the driver
      tags:
      - ride
  /ride/start-ride:
    post:
      consumes:
      - application/json
      description: Starts the ride between the driver and the hitcher
      parameters:
      - description: Start ride request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.StartRideRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully started ride
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.StartRideResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Start a ride
      tags:
      - ride
  /ride/update-ride-location:
    post:
      consumes:
      - application/json
      description: Updates the current location of the driver during the ride
      parameters:
      - description: Update ride location request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateRideLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated ride location
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UpdateRideLocationResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Update the current location of the driver during the ride
      tags:
      - ride
  /user/get-profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetUserProfileResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
  /user/register-device-token:
    post:
      consumes:
      - application/json
      description: Registers the device token for the authenticated user to enable
        push notifications via Firebase Cloud Messaging
      parameters:
      - description: Device token registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterDeviceTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered device token
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Invalid request or validation error
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Register device token for push notifications
      tags:
      - user
  /user/update-avatar:
    post:
      consumes:
      - application/json
      description: Update the avatar image of the authenticated user
      parameters:
      - description: Avatar image file
        in: formData
        name: avatar_image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated avatar
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UpdateAvatarResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Update user avatar
      tags:
      - user
  /user/update-profile:
    post:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: User profile update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.UpdateUserProfileResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
  /vehicle/get-vehicle:
    get:
      consumes:
      - application/json
      description: Retrieves and returns a detailed list of vehicles for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved vehicles
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetVehicleResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get user's vehicles
      tags:
      - vehicle
  /vehicle/register-vehicle:
    post:
      consumes:
      - application/json
      description: Register a new vehicle for the authenticated user
      parameters:
      - description: Vehicle registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterVehicleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered vehicle
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Register a new vehicle
      tags:
      - vehicle
  /vehicle/vehicles:
    get:
      consumes:
      - application/json
      description: Retrieves and returns the list of vehicles for user to select when
        registering a vehicle
      parameters:
      - description: Search input for vehicle name
        in: query
        name: input
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        required: true
        type: integer
      - description: Page number for pagination purposes
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved vehicles
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/schemas.GetVehiclesResponse'
              type: object
        "500":
          description: Failed to get vehicles
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - BearerAuth: []
      summary: Get list of vehicles
      tags:
      - vehicle
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
