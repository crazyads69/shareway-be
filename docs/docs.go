// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/delete-user": {
            "post": {
                "description": "Delete the user from the provided phone number in the database (only available in dev environment)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "description": "Delete user request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.DeleteUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or input",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/init-register": {
            "post": {
                "description": "Start the registration process by sending an OTP to the provided phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Initialize user registration",
                "parameters": [
                    {
                        "description": "Registration initialization request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.InitRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.InitRegisterResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or input",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/login-oauth": {
            "post": {
                "description": "Authenticates a user using OAuth2 and sends an OTP to their phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login with OAuth2",
                "parameters": [
                    {
                        "description": "OAuth2 login details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginWithOAuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.LoginWithOAuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "404": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/login-phone": {
            "post": {
                "description": "Initiates login process by sending OTP to the provided phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login with phone number",
                "parameters": [
                    {
                        "description": "Phone number for login",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "404": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out the user by revoking their refresh token from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user and revoke the token",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates the refresh token and issues a new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token and return new access token for the user",
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.RefreshTokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid refresh token or authorization header",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Starts the registration process and creates a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration request containing phone number, full name, and optional email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.RegisterUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or input",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/resend-otp": {
            "post": {
                "description": "Resends the OTP to the provided phone number for user verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend OTP",
                "parameters": [
                    {
                        "description": "OTP resend request containing phone number",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.ResendOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or input",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/verify-cccd": {
            "post": {
                "description": "Verifies the front and back images of a user's CCCD, saves the information, and updates user status",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify user's CCCD (Citizen Identity Card)",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Front image of CCCD",
                        "name": "front_image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Back image of CCCD",
                        "name": "back_image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID (UUID format)",
                        "name": "user_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's phone number (9-11 digits)",
                        "name": "phone_number",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CCCD verified successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.VerifyCCCDResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or CCCD info",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/verify-login-otp": {
            "post": {
                "description": "Verifies the OTP for login, creates a user session, and returns user info with access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify login OTP and create user session",
                "parameters": [
                    {
                        "description": "OTP verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.VerifyLoginOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.VerifyLoginOTPResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or OTP verification failed",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create session",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/auth/verify-register-otp": {
            "post": {
                "description": "Verifies the OTP sent during registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify registration OTP",
                "parameters": [
                    {
                        "description": "OTP verification request containing phone number and OTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.VerifyRegisterOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or OTP verification failed",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/map/autocomplete": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of places that match the query string",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "map"
                ],
                "summary": "Get autocomplete suggestions for places",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Input string to search for",
                        "name": "input",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Location coordinates (lat,lng)",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Search radius in meters",
                        "name": "radius",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include more compound results",
                        "name": "more_compound",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Current location coordinates (lat,lng)",
                        "name": "current_location",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved autocomplete data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.GoongAutoCompleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request query",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get autocomplete data",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/map/geocode": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves geocode information for a specified latitude and longitude",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "map"
                ],
                "summary": "Get geocode data for a given point",
                "parameters": [
                    {
                        "description": "Geocode request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.GeoCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved geocode data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.GeoCodeLocationResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get geocode data",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/map/give-ride": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Receives a list of points and returns a route and polyline encoded string for the driver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "map"
                ],
                "summary": "Create a route for a driver's give ride",
                "parameters": [
                    {
                        "description": "Give ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.GiveRideRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created route",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.GiveRideResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create route",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/map/hitch-ride": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Receives a list of points and returns a route and polyline encoded string for the passenger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "map"
                ],
                "summary": "Create a route for a passenger's hitch ride",
                "parameters": [
                    {
                        "description": "Hitch ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.HitchRideRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created route",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.HitchRideResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create route",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/map/suggest-give-rides": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of ride offers that match the business rules for the hitcher (ride request)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "map"
                ],
                "summary": "Suggest ride offers for a hitcher",
                "parameters": [
                    {
                        "description": "Ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SuggestRideOfferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved suggested ride offers",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.SuggestRideOfferResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/map/suggest-hitch-rides": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of ride requests that match the business rules for the rider (ride offer)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "map"
                ],
                "summary": "Suggest ride requests for a rider (ride offer)",
                "parameters": [
                    {
                        "description": "Ride offer ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SuggestRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved suggested ride requests",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.SuggestRideRequestResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/notification/create-notification": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new notification to be sent to the user device using the FCM service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Create a new notification",
                "parameters": [
                    {
                        "description": "Create notification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created notification",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/notification/create-test-websocket": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a test websocket for testing connection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Create a test websocket",
                "parameters": [
                    {
                        "description": "Create test websocket request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CreateTestWebsocketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created test websocket",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/protected/test": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint tests the authentication middleware",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Protected"
                ],
                "summary": "Test protected endpoint",
                "responses": {
                    "200": {
                        "description": "Successfully authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/ride/accept-give-ride-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Accept a ride offer request from the driver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Accept a ride offer request from the driver",
                "parameters": [
                    {
                        "description": "Accept give ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.AcceptGiveRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully accepted ride offer request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.AcceptGiveRideRequestResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/accept-hitch-ride-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Accept a ride request from the hitcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Accept a ride request from the hitcher",
                "parameters": [
                    {
                        "description": "Accept hitch ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.AcceptHitchRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully accepted ride request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.AcceptHitchRideRequestResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/cancel-give-ride-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a ride offer request from the driver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Cancel a ride offer request from the driver",
                "parameters": [
                    {
                        "description": "Cancel give ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CancelGiveRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully canceled ride offer request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/cancel-hitch-ride-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel a ride request from the hitcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Cancel a ride request from the hitcher",
                "parameters": [
                    {
                        "description": "Cancel hitch ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.CancelHitchRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully canceled ride request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/end-ride": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ends the ride between the driver and the hitcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "End a ride",
                "parameters": [
                    {
                        "description": "End ride request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.EndRideRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully ended ride",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.EndRideResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/give-ride-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a ride offer request from the driver to the hitcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Send a ride offer request from the driver to the hitcher",
                "parameters": [
                    {
                        "description": "Give ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SendGiveRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully sent ride offer request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/hitch-ride-request": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a ride request from the hitcher to the driver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Send a ride request from the hitcher to the driver",
                "parameters": [
                    {
                        "description": "Hitch ride request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.SendHitchRideRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully sent ride request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/start-ride": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts the ride between the driver and the hitcher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Start a ride",
                "parameters": [
                    {
                        "description": "Start ride request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.StartRideRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully started ride",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.StartRideResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/ride/update-ride-location": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the current location of the driver during the ride",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ride"
                ],
                "summary": "Update the current location of the driver during the ride",
                "parameters": [
                    {
                        "description": "Update ride location request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateRideLocationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated ride location",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.UpdateRideLocationResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/user/get-profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile information of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.GetUserProfileResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/user/register-device-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers the device token for the authenticated user to enable push notifications via Firebase Cloud Messaging",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register device token for push notifications",
                "parameters": [
                    {
                        "description": "Device token registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterDeviceTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered device token",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/user/update-profile": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the profile information of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "User profile update information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.UpdateUserProfileResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/vehicle/get-vehicle": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves and returns a detailed list of vehicles for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicle"
                ],
                "summary": "Get user's vehicles",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved vehicles",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.GetVehicleResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/vehicle/register-vehicle": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register a new vehicle for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicle"
                ],
                "summary": "Register a new vehicle",
                "parameters": [
                    {
                        "description": "Vehicle registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterVehicleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered vehicle",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        },
        "/vehicle/vehicles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves and returns the list of vehicles for user to select when registering a vehicle",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vehicle"
                ],
                "summary": "Get list of vehicles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search input for vehicle name",
                        "name": "input",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination purposes",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved vehicles",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/helper.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/schemas.GetVehiclesResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to get vehicles",
                        "schema": {
                            "$ref": "#/definitions/helper.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "helper.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "message_en": {
                    "type": "string"
                },
                "message_vi": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "schemas.AcceptGiveRideRequestRequest": {
            "type": "object",
            "required": [
                "receiverID",
                "rideOfferID",
                "rideRequestID",
                "vehicleID"
            ],
            "properties": {
                "receiverID": {
                    "description": "The ID of the receiver (the user who received the request) aka the hitcher",
                    "type": "string"
                },
                "rideOfferID": {
                    "description": "The ID of the ride offer (current user is the driver)",
                    "type": "string"
                },
                "rideRequestID": {
                    "description": "The ID of the ride request (the user received request is the hitcher)",
                    "type": "string"
                },
                "vehicleID": {
                    "description": "The ID of the vehicle",
                    "type": "string"
                }
            }
        },
        "schemas.AcceptGiveRideRequestResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "driver_current_latitude": {
                    "type": "number"
                },
                "driver_current_longitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "receiver_id": {
                    "type": "string"
                },
                "ride_id": {
                    "type": "string"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "rider_current_latitude": {
                    "type": "number"
                },
                "rider_current_longitude": {
                    "type": "number"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/schemas.TransactionDetail"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.AcceptHitchRideRequestRequest": {
            "type": "object",
            "required": [
                "receiverID",
                "rideOfferID",
                "rideRequestID",
                "vehicleID"
            ],
            "properties": {
                "receiverID": {
                    "description": "The ID of the receiver (the user who received the request) aka the driver",
                    "type": "string"
                },
                "rideOfferID": {
                    "description": "The ID of the ride offer (the user who received request is the driver)",
                    "type": "string"
                },
                "rideRequestID": {
                    "description": "The ID of the ride request (current user is the hitcher)",
                    "type": "string"
                },
                "vehicleID": {
                    "description": "The ID of the vehicle",
                    "type": "string"
                }
            }
        },
        "schemas.AcceptHitchRideRequestResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "driver_current_latitude": {
                    "type": "number"
                },
                "driver_current_longitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "receiver_id": {
                    "type": "string"
                },
                "ride_id": {
                    "type": "string"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "rider_current_latitude": {
                    "type": "number"
                },
                "rider_current_longitude": {
                    "type": "number"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/schemas.TransactionDetail"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.CancelGiveRideRequestRequest": {
            "type": "object",
            "required": [
                "receiverID",
                "rideOfferID",
                "rideRequestID"
            ],
            "properties": {
                "receiverID": {
                    "description": "The driver who received the cancel request",
                    "type": "string"
                },
                "rideOfferID": {
                    "description": "The hitcher who want to cancel the ride offer",
                    "type": "string"
                },
                "rideRequestID": {
                    "description": "The driver who received the request",
                    "type": "string"
                }
            }
        },
        "schemas.CancelHitchRideRequestRequest": {
            "type": "object",
            "required": [
                "receiverID",
                "rideOfferID",
                "rideRequestID"
            ],
            "properties": {
                "receiverID": {
                    "description": "The hitcher who received the cancel request",
                    "type": "string"
                },
                "rideOfferID": {
                    "description": "The hitcher who received the request",
                    "type": "string"
                },
                "rideRequestID": {
                    "description": "The driver who want to cancel the ride request",
                    "type": "string"
                }
            }
        },
        "schemas.CreateNotificationRequest": {
            "type": "object",
            "required": [
                "body",
                "title"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "data": {
                    "description": "Additional data to be sent with the notification (optional)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "schemas.CreateTestWebsocketRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "schemas.DeleteUserRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.EndRideRequest": {
            "type": "object",
            "required": [
                "currentLocation",
                "rideID"
            ],
            "properties": {
                "currentLocation": {
                    "description": "Current user location",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Point"
                        }
                    ]
                },
                "rideID": {
                    "description": "Ride ID of the ride to end",
                    "type": "string"
                }
            }
        },
        "schemas.EndRideResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "driver_current_latitude": {
                    "type": "number"
                },
                "driver_current_longitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "receiver_id": {
                    "type": "string"
                },
                "ride_id": {
                    "type": "string"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "rider_current_latitude": {
                    "type": "number"
                },
                "rider_current_longitude": {
                    "type": "number"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/schemas.TransactionDetail"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserInfo"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.GeoCodeLocation": {
            "type": "object",
            "properties": {
                "distance": {
                    "description": "Distance from the location (in kilometers) for which the geocode is performed",
                    "type": "number"
                },
                "formatted_address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "main_address": {
                    "description": "Main address of the location",
                    "type": "string"
                },
                "place_id": {
                    "type": "string"
                },
                "secondary_address": {
                    "type": "string"
                }
            }
        },
        "schemas.GeoCodeLocationResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.GeoCodeLocation"
                    }
                }
            }
        },
        "schemas.GeoCodeRequest": {
            "type": "object",
            "required": [
                "current_location",
                "point"
            ],
            "properties": {
                "current_location": {
                    "description": "Current location of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Point"
                        }
                    ]
                },
                "point": {
                    "description": "Point for which the geocode is performed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Point"
                        }
                    ]
                }
            }
        },
        "schemas.GetUserProfileResponse": {
            "type": "object",
            "required": [
                "user"
            ],
            "properties": {
                "user": {
                    "$ref": "#/definitions/schemas.UserResponse"
                }
            }
        },
        "schemas.GetVehicleResponse": {
            "type": "object",
            "properties": {
                "vehicle": {
                    "description": "this is an array because a user can have multiple vehicles",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.VehicleDetail"
                    }
                }
            }
        },
        "schemas.GetVehiclesResponse": {
            "type": "object",
            "properties": {
                "vehicles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.Vehicle"
                    }
                }
            }
        },
        "schemas.GiveRideRequest": {
            "type": "object",
            "required": [
                "place_list",
                "vehicle_id"
            ],
            "properties": {
                "place_list": {
                    "description": "Points []Point ` + "`" + `json:\"points\" binding:\"required\"` + "`" + ` // List of points for the route",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_time": {
                    "description": "Start time of the ride (if not provided, the ride is immediate)",
                    "type": "string"
                },
                "vehicle_id": {
                    "description": "Vehicle ID for the ride that user has registered",
                    "type": "string"
                }
            }
        },
        "schemas.GiveRideResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "route": {
                    "$ref": "#/definitions/schemas.GoongDirectionsResponse"
                },
                "start_time": {
                    "type": "string"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.GoongAutoCompleteResponse": {
            "type": "object",
            "properties": {
                "executed_time": {
                    "type": "integer"
                },
                "executed_time_all": {
                    "type": "integer"
                },
                "predictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.Prediction"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "schemas.GoongDirectionsResponse": {
            "type": "object",
            "properties": {
                "geocoded_waypoints": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "geocoder_status": {
                                "type": "string"
                            },
                            "place_id": {
                                "type": "string"
                            }
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "bounds": {
                                "description": "Empty struct as the bounds are empty in the example",
                                "type": "object"
                            },
                            "legs": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "distance": {
                                            "type": "object",
                                            "properties": {
                                                "text": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "duration": {
                                            "type": "object",
                                            "properties": {
                                                "text": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "end_address": {
                                            "type": "string"
                                        },
                                        "end_location": {
                                            "type": "object",
                                            "properties": {
                                                "lat": {
                                                    "type": "number"
                                                },
                                                "lng": {
                                                    "type": "number"
                                                }
                                            }
                                        },
                                        "start_address": {
                                            "type": "string"
                                        },
                                        "start_location": {
                                            "type": "object",
                                            "properties": {
                                                "lat": {
                                                    "type": "number"
                                                },
                                                "lng": {
                                                    "type": "number"
                                                }
                                            }
                                        },
                                        "steps": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "distance": {
                                                        "type": "object",
                                                        "properties": {
                                                            "text": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    "duration": {
                                                        "type": "object",
                                                        "properties": {
                                                            "text": {
                                                                "type": "string"
                                                            },
                                                            "value": {
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    "end_location": {
                                                        "type": "object",
                                                        "properties": {
                                                            "lat": {
                                                                "type": "number"
                                                            },
                                                            "lng": {
                                                                "type": "number"
                                                            }
                                                        }
                                                    },
                                                    "html_instructions": {
                                                        "type": "string"
                                                    },
                                                    "maneuver": {
                                                        "type": "string"
                                                    },
                                                    "polyline": {
                                                        "type": "object",
                                                        "properties": {
                                                            "points": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "start_location": {
                                                        "type": "object",
                                                        "properties": {
                                                            "lat": {
                                                                "type": "number"
                                                            },
                                                            "lng": {
                                                                "type": "number"
                                                            }
                                                        }
                                                    },
                                                    "travel_mode": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "overview_polyline": {
                                "type": "object",
                                "properties": {
                                    "points": {
                                        "type": "string"
                                    }
                                }
                            },
                            "summary": {
                                "type": "string"
                            },
                            "warnings": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "waypoint_order": {
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "schemas.HitchRideRequest": {
            "type": "object",
            "required": [
                "place_list"
            ],
            "properties": {
                "place_list": {
                    "description": "Points []Point ` + "`" + `json:\"points\" binding:\"required\"` + "`" + ` // List of points for the route",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "start_time": {
                    "description": "Start time of the ride (if not provided, the ride is immediate)",
                    "type": "string"
                }
            }
        },
        "schemas.HitchRideResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "route": {
                    "$ref": "#/definitions/schemas.GoongDirectionsResponse"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "schemas.InitRegisterRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.InitRegisterResponse": {
            "type": "object",
            "required": [
                "is_activated",
                "is_verified",
                "phone_number"
            ],
            "properties": {
                "is_activated": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.LoginRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.LoginResponse": {
            "type": "object",
            "required": [
                "is_activated",
                "is_verified",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "is_activated": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "schemas.LoginWithOAuthRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 3
                }
            }
        },
        "schemas.LoginWithOAuthResponse": {
            "type": "object",
            "required": [
                "full_name",
                "is_activated",
                "is_verified",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "full_name": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 3
                },
                "is_activated": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 11,
                    "minLength": 9
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "schemas.MatchedSubstring": {
            "type": "object",
            "properties": {
                "length": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "schemas.PlusCode": {
            "type": "object",
            "properties": {
                "compound_code": {
                    "type": "string"
                },
                "global_code": {
                    "type": "string"
                }
            }
        },
        "schemas.Point": {
            "type": "object",
            "properties": {
                "lat": {
                    "description": "Latitude",
                    "type": "number"
                },
                "lng": {
                    "description": "Longitude",
                    "type": "number"
                }
            }
        },
        "schemas.Prediction": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "display_type": {
                    "type": "string"
                },
                "distance": {
                    "description": "Distance from the location (in kilometers) for which the autocomplete is performed",
                    "type": "number"
                },
                "has_children": {
                    "type": "boolean"
                },
                "matched_substrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.MatchedSubstring"
                    }
                },
                "place_id": {
                    "type": "string"
                },
                "plus_code": {
                    "$ref": "#/definitions/schemas.PlusCode"
                },
                "reference": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "structured_formatting": {
                    "$ref": "#/definitions/schemas.StructuredFormatting"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.Term"
                    }
                }
            }
        },
        "schemas.RefreshTokenResponse": {
            "type": "object",
            "required": [
                "access_token",
                "refresh_token",
                "user_id"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "schemas.RegisterDeviceTokenRequest": {
            "type": "object",
            "required": [
                "device_token"
            ],
            "properties": {
                "device_token": {
                    "type": "string"
                }
            }
        },
        "schemas.RegisterUserRequest": {
            "type": "object",
            "required": [
                "full_name",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 256
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 3
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.RegisterUserResponse": {
            "type": "object",
            "required": [
                "full_name",
                "is_activated",
                "is_verified",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "full_name": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 3
                },
                "is_activated": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "schemas.RegisterVehicleRequest": {
            "type": "object",
            "required": [
                "ca_vet",
                "license_plate",
                "user_id",
                "vehicle_id"
            ],
            "properties": {
                "ca_vet": {
                    "type": "string"
                },
                "license_plate": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "vehicle_id": {
                    "description": "this id from the vehicle_type table in the database",
                    "type": "string"
                }
            }
        },
        "schemas.ResendOTPRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.RideOfferDetail": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "driver_current_latitude": {
                    "type": "number"
                },
                "driver_current_longitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserInfo"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.RideRequestDetail": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "rider_current_latitude": {
                    "type": "number"
                },
                "rider_current_longitude": {
                    "type": "number"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserInfo"
                }
            }
        },
        "schemas.SendGiveRideRequestRequest": {
            "type": "object",
            "required": [
                "receiverID",
                "rideOfferID",
                "rideRequestID",
                "vehicleID"
            ],
            "properties": {
                "receiverID": {
                    "description": "The ID of the receiver (the user who received the request) aka the hitcher",
                    "type": "string"
                },
                "rideOfferID": {
                    "description": "The ID of the ride offer (current user is the driver)",
                    "type": "string"
                },
                "rideRequestID": {
                    "description": "The ID of the ride request (the user received request is the hitcher)",
                    "type": "string"
                },
                "vehicleID": {
                    "type": "string"
                }
            }
        },
        "schemas.SendHitchRideRequestRequest": {
            "type": "object",
            "required": [
                "receiverID",
                "rideOfferID",
                "rideRequestID"
            ],
            "properties": {
                "receiverID": {
                    "description": "The ID of the receiver (the user who received the request) aka the driver",
                    "type": "string"
                },
                "rideOfferID": {
                    "description": "The ID of the ride offer (the user who received request is the driver)",
                    "type": "string"
                },
                "rideRequestID": {
                    "description": "The ID of the ride request (current user is the hitcher)",
                    "type": "string"
                }
            }
        },
        "schemas.StartRideRequest": {
            "type": "object",
            "required": [
                "currentLocation",
                "rideID"
            ],
            "properties": {
                "currentLocation": {
                    "description": "Current user location",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Point"
                        }
                    ]
                },
                "rideID": {
                    "description": "Ride ID of the ride to start",
                    "type": "string"
                }
            }
        },
        "schemas.StartRideResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "driver_current_latitude": {
                    "type": "number"
                },
                "driver_current_longitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "receiver_id": {
                    "type": "string"
                },
                "ride_id": {
                    "type": "string"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "rider_current_latitude": {
                    "type": "number"
                },
                "rider_current_longitude": {
                    "type": "number"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/schemas.TransactionDetail"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserInfo"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.StructuredFormatting": {
            "type": "object",
            "properties": {
                "main_text": {
                    "type": "string"
                },
                "secondary_text": {
                    "type": "string"
                }
            }
        },
        "schemas.SuggestRideOfferRequest": {
            "type": "object",
            "required": [
                "ride_request_id"
            ],
            "properties": {
                "ride_request_id": {
                    "description": "Ride request ID for which the user wants to suggest a ride offer",
                    "type": "string"
                }
            }
        },
        "schemas.SuggestRideOfferResponse": {
            "type": "object",
            "properties": {
                "ride_offers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.RideOfferDetail"
                    }
                }
            }
        },
        "schemas.SuggestRideRequestRequest": {
            "type": "object",
            "required": [
                "ride_offer_id"
            ],
            "properties": {
                "ride_offer_id": {
                    "description": "Ride offer ID for which the user wants to suggest a ride request",
                    "type": "string"
                }
            }
        },
        "schemas.SuggestRideRequestResponse": {
            "type": "object",
            "properties": {
                "ride_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schemas.RideRequestDetail"
                    }
                }
            }
        },
        "schemas.Term": {
            "type": "object",
            "properties": {
                "offset": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "schemas.TransactionDetail": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "payment_method": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "schemas.UpdateRideLocationRequest": {
            "type": "object",
            "required": [
                "currentLocation",
                "rideID"
            ],
            "properties": {
                "currentLocation": {
                    "description": "Current driver location",
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemas.Point"
                        }
                    ]
                },
                "rideID": {
                    "description": "Ride ID of the ride to update location",
                    "type": "string"
                }
            }
        },
        "schemas.UpdateRideLocationResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "number"
                },
                "driver_current_latitude": {
                    "type": "number"
                },
                "driver_current_longitude": {
                    "type": "number"
                },
                "duration": {
                    "type": "integer"
                },
                "encoded_polyline": {
                    "type": "string"
                },
                "end_address": {
                    "type": "string"
                },
                "end_latitude": {
                    "type": "number"
                },
                "end_longitude": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "fare": {
                    "type": "number"
                },
                "receiver_id": {
                    "type": "string"
                },
                "ride_id": {
                    "type": "string"
                },
                "ride_offer_id": {
                    "type": "string"
                },
                "ride_request_id": {
                    "type": "string"
                },
                "rider_current_latitude": {
                    "type": "number"
                },
                "rider_current_longitude": {
                    "type": "number"
                },
                "start_address": {
                    "type": "string"
                },
                "start_latitude": {
                    "type": "number"
                },
                "start_longitude": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction": {
                    "$ref": "#/definitions/schemas.TransactionDetail"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserInfo"
                },
                "vehicle": {
                    "$ref": "#/definitions/schemas.VehicleDetail"
                }
            }
        },
        "schemas.UpdateUserProfileRequest": {
            "type": "object",
            "required": [
                "full_name",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 256
                },
                "full_name": {
                    "description": "Email is optional",
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 3
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "schemas.UpdateUserProfileResponse": {
            "type": "object",
            "required": [
                "user"
            ],
            "properties": {
                "user": {
                    "$ref": "#/definitions/schemas.UserResponse"
                }
            }
        },
        "schemas.UserInfo": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "schemas.UserResponse": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_activated": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "schemas.Vehicle": {
            "type": "object",
            "required": [
                "vehicle_id"
            ],
            "properties": {
                "fuel_consumed": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "vehicle_id": {
                    "type": "string"
                }
            }
        },
        "schemas.VehicleDetail": {
            "type": "object",
            "required": [
                "vehicle_id"
            ],
            "properties": {
                "fuel_consumed": {
                    "type": "number"
                },
                "license_plate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "vehicle_id": {
                    "type": "string"
                }
            }
        },
        "schemas.VerifyCCCDResponse": {
            "type": "object",
            "required": [
                "access_token",
                "refresh_token",
                "user"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserResponse"
                }
            }
        },
        "schemas.VerifyLoginOTPRequest": {
            "type": "object",
            "required": [
                "otp",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 6
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "schemas.VerifyLoginOTPResponse": {
            "type": "object",
            "required": [
                "access_token",
                "refresh_token",
                "user"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/schemas.UserResponse"
                }
            }
        },
        "schemas.VerifyRegisterOTPRequest": {
            "type": "object",
            "required": [
                "otp",
                "phone_number"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 6
                },
                "phone_number": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
